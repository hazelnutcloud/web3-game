/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Trustus {
  export type TrustusPacketStruct = {
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    request: string;
    deadline: BigNumberish;
    receiver: string;
  };

  export type TrustusPacketStructOutput = [
    number,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    v: number;
    r: string;
    s: string;
    request: string;
    deadline: BigNumber;
    receiver: string;
  };
}

export interface ClaimVerifierInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "claim(address,(uint8,bytes32,bytes32,address,uint256,address))": FunctionFragment;
    "isClaimManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setIsClaimManager(address,bool)": FunctionFragment;
    "setIsTrusted(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "claim"
      | "isClaimManager"
      | "owner"
      | "renounceOwnership"
      | "setIsClaimManager"
      | "setIsTrusted"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, Trustus.TrustusPacketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsClaimManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTrusted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsClaimManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedClaimManager(address,bool)": EventFragment;
    "UpdatedTrustedSigner(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedClaimManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTrustedSigner"): EventFragment;
}

export interface ClaimedEventObject {
  claimer: string;
  claimManager: string;
}
export type ClaimedEvent = TypedEvent<[string, string], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdatedClaimManagerEventObject {
  claimManager: string;
  isClaimManager: boolean;
}
export type UpdatedClaimManagerEvent = TypedEvent<
  [string, boolean],
  UpdatedClaimManagerEventObject
>;

export type UpdatedClaimManagerEventFilter =
  TypedEventFilter<UpdatedClaimManagerEvent>;

export interface UpdatedTrustedSignerEventObject {
  signer: string;
  isTrusted: boolean;
}
export type UpdatedTrustedSignerEvent = TypedEvent<
  [string, boolean],
  UpdatedTrustedSignerEventObject
>;

export type UpdatedTrustedSignerEventFilter =
  TypedEventFilter<UpdatedTrustedSignerEvent>;

export interface ClaimVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    claim(
      request: string,
      packet: Trustus.TrustusPacketStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimManager(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsClaimManager(
      claimManager: string,
      isClaimManager_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsTrusted(
      signer: string,
      isTrusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  claim(
    request: string,
    packet: Trustus.TrustusPacketStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsClaimManager(
    claimManager: string,
    isClaimManager_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsTrusted(
    signer: string,
    isTrusted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    claim(
      request: string,
      packet: Trustus.TrustusPacketStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimManager(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setIsClaimManager(
      claimManager: string,
      isClaimManager_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTrusted(
      signer: string,
      isTrusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claimed(address,address)"(
      claimer?: string | null,
      claimManager?: string | null
    ): ClaimedEventFilter;
    Claimed(
      claimer?: string | null,
      claimManager?: string | null
    ): ClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdatedClaimManager(address,bool)"(
      claimManager?: string | null,
      isClaimManager?: null
    ): UpdatedClaimManagerEventFilter;
    UpdatedClaimManager(
      claimManager?: string | null,
      isClaimManager?: null
    ): UpdatedClaimManagerEventFilter;

    "UpdatedTrustedSigner(address,bool)"(
      signer?: string | null,
      isTrusted?: null
    ): UpdatedTrustedSignerEventFilter;
    UpdatedTrustedSigner(
      signer?: string | null,
      isTrusted?: null
    ): UpdatedTrustedSignerEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      request: string,
      packet: Trustus.TrustusPacketStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimManager(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsClaimManager(
      claimManager: string,
      isClaimManager_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsTrusted(
      signer: string,
      isTrusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      request: string,
      packet: Trustus.TrustusPacketStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsClaimManager(
      claimManager: string,
      isClaimManager_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsTrusted(
      signer: string,
      isTrusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
